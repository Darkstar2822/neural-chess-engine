name: Test Neural Chess Engine

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test device detection
      run: |
        python check_device.py
    
    - name: Test model creation
      run: |
        python main.py init
    
    - name: Test basic functionality
      run: |
        python -c "
        from src.neural_network.chess_net import ChessNet
        from src.engine.chess_game import ChessGame
        from src.engine.neural_player import NeuralPlayer
        
        # Test model creation
        model = ChessNet()
        print('✅ Model created successfully')
        
        # Test game creation
        game = ChessGame()
        print('✅ Game created successfully')
        
        # Test player creation
        player = NeuralPlayer(model)
        print('✅ Player created successfully')
        
        # Test move generation
        move = player.get_move(game)
        print(f'✅ Move generated: {move}')
        "